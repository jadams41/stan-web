// Code generated by Stan version 1.3

#include <stan/model/model_header.hpp>

namespace linear_model_model_namespace {

using std::vector;
using std::string;
using std::stringstream;
using stan::agrad::var;
using stan::model::prob_grad_ad;
using stan::math::get_base1;
using stan::math::stan_print;
using stan::io::dump;
using std::istream;
using namespace stan::math;
using namespace stan::prob;
using namespace stan::agrad;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

class linear_model_model : public prob_grad_ad {
private:
    int N;
    vector_d x;
    vector_d y;
public:
    linear_model_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad_ad::prob_grad_ad(0) {
        static const char* function__ = "linear_model_model_namespace::linear_model_model(%1%)";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        stan::math::validate_non_negative_index("x", "N", N);
        x = vector_d(N);
        context__.validate_dims("data initialization", "x", "vector_d", context__.to_vec(N));
        vals_r__ = context__.vals_r("x");
        pos__ = 0;
        size_t x_i_vec_lim__ = N;
        for (size_t i_vec__ = 0; i_vec__ < x_i_vec_lim__; ++i_vec__) {
            x[i_vec__] = vals_r__[pos__++];
        }
        stan::math::validate_non_negative_index("y", "N", N);
        y = vector_d(N);
        context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(N));
        vals_r__ = context__.vals_r("y");
        pos__ = 0;
        size_t y_i_vec_lim__ = N;
        for (size_t i_vec__ = 0; i_vec__ < y_i_vec_lim__; ++i_vec__) {
            y[i_vec__] = vals_r__[pos__++];
        }
        // validate data
        try { 
            check_greater_or_equal(function__,x,-(1),"x");
            check_less_or_equal(function__,x,1,"x");
        } catch (std::domain_error& e) { throw std::domain_error(std::string("Invalid value of x: ") + std::string(e.what())); };
        try { 
            check_greater_or_equal(function__,y,-(1),"y");
            check_less_or_equal(function__,y,1,"y");
        } catch (std::domain_error& e) { throw std::domain_error(std::string("Invalid value of y: ") + std::string(e.what())); };

        // validate transformed data

        set_param_ranges();
    }

    void set_param_ranges() {
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
    }

    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__) {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;


        if (!(context__.contains_r("alpha")))
            throw std::runtime_error("variable alpha missing");
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        context__.validate_dims("initialization", "alpha", "double", context__.to_vec());
        double alpha(0);
        alpha = vals_r__[pos__++];
        writer__.scalar_lub_unconstrain(-(1),1,alpha);

        if (!(context__.contains_r("beta")))
            throw std::runtime_error("variable beta missing");
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        context__.validate_dims("initialization", "beta", "double", context__.to_vec());
        double beta(0);
        beta = vals_r__[pos__++];
        writer__.scalar_lub_unconstrain(-(10),10,beta);

        if (!(context__.contains_r("sigma_noise")))
            throw std::runtime_error("variable sigma_noise missing");
        vals_r__ = context__.vals_r("sigma_noise");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma_noise", "double", context__.to_vec());
        double sigma_noise(0);
        sigma_noise = vals_r__[pos__++];
        writer__.scalar_lb_unconstrain(0,sigma_noise);
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    var log_prob(vector<var>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) {
      return log_prob_poly<true,var>(params_r__,params_i__,pstream__);
    }

    template <bool propto__, typename T__>
    T__ log_prob_poly(vector<T__>& params_r__,
                      vector<int>& params_i__,
                      std::ostream* pstream__ = 0) {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        T__ alpha = in__.scalar_lub_constrain(-(1),1,lp__);
        (void) alpha;  // supress unused variable warning
        T__ beta = in__.scalar_lub_constrain(-(10),10,lp__);
        (void) beta;  // supress unused variable warning
        T__ sigma_noise = in__.scalar_lb_constrain(0,lp__);
        (void) sigma_noise;  // supress unused variable warning

        // transformed parameters

        // initialized transformed params to avoid seg fault on val access
        

        // validate transformed parameters

        const char* function__ = "validate transformed params %1%";
        (void) function__; // dummy to suppress unused var warning
        // model body
        lp__ += stan::prob::normal_log<true>(sigma_noise, 0, 1);
        lp__ += stan::prob::normal_log<true>(y, add(alpha,multiply(x,beta)), sigma_noise);

        return lp__;

    } // log_prob_poly(...var...)


    void get_param_names(std::vector<std::string>& names__) {
        names__.resize(0);
        names__.push_back("alpha");
        names__.push_back("beta");
        names__.push_back("sigma_noise");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "linear_model_model_namespace::write_array(%1%)";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        double alpha = in__.scalar_lub_constrain(-(1),1);
        double beta = in__.scalar_lub_constrain(-(10),10);
        double sigma_noise = in__.scalar_lb_constrain(0);
        vars__.push_back(alpha);
        vars__.push_back(beta);
        vars__.push_back(sigma_noise);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning


        // validate transformed parameters

        // write transformed parameters

        if (!include_gqs__) return;
        // declare and define generated quantities


        // validate generated quantities

        // write generated quantities
    }

    void write_array_params(std::vector<double>& params_r__,
                            std::vector<int>& params_i__,
                            std::vector<double>& vars__,
                            std::ostream* pstream__ = 0) {
        boost::random::minstd_rand base_rng; // dummy
        write_array(base_rng,params_r__,params_i__,vars__,false,false,pstream__);
    }

    void write_array_params_all(std::vector<double>& params_r__,
                            std::vector<int>& params_i__,
                            std::vector<double>& vars__,
                            std::ostream* pstream__ = 0) {
        boost::random::minstd_rand base_rng; // dummy
        write_array(base_rng,params_r__,params_i__,vars__,true,true,pstream__);
    }


    void write_csv_header(std::ostream& o__) {
        stan::io::csv_writer writer__(o__);
        writer__.comma();
        o__ << "alpha";
        writer__.comma();
        o__ << "beta";
        writer__.comma();
        o__ << "sigma_noise";
        writer__.newline();
    }

    template <typename RNG>
    void write_csv(RNG& base_rng__,
                   std::vector<double>& params_r__,
                   std::vector<int>& params_i__,
                   std::ostream& o__,
                   std::ostream* pstream__ = 0) {
        stan::io::reader<double> in__(params_r__,params_i__);
        stan::io::csv_writer writer__(o__);
        static const char* function__ = "linear_model_model_namespace::write_csv(%1%)";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        double alpha = in__.scalar_lub_constrain(-(1),1);
        writer__.write(alpha);
        double beta = in__.scalar_lub_constrain(-(10),10);
        writer__.write(beta);
        double sigma_noise = in__.scalar_lb_constrain(0);
        writer__.write(sigma_noise);

        // declare, define and validate transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning



        // write transformed parameters

        // declare and define generated quantities


        // validate generated quantities

        // write generated quantities
        writer__.newline();
    }

    std::string model_name() {
        return "linear_model_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_noise";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_noise";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
    }

}; // model

} // namespace

