Using wt
--------
0. Following instructions at wt/INSTALL.html

1. Create build directory
cd wt; mkdir build; cd build;

2. Configure the library
cmake ../

-- had to set the right boost library using
ccmake ../

3. Build the library
make

4. Install the library
sudo make install


Run examples using wthttpd
1. Build the examples
make -C examples

2. Run the Hangman example
cd ../examples/hangman
ln -s ../../resources .
../../build/examples/hangman/hangman.wt --docroot . --http-address 0.0.0.0 --http-port 8080



Build boost thread library?
---------------------------
cd stan;
cd boost_1_53_0/

./bjam --clean

./bjam install variant=release link=static threading=multi \
       runtime-link=static toolset=gcc \
       thread chrono date_time

ls bin.v2/libs/thread/build/clang-darwin-4.2.1/release/threading-multi/libboost_thread.dylib 


thread.cpp

export DYLD_LIBRARY_PATH=~/dev/stan-web/boost_1_53_0/bin.v2/libs/thread/build/clang-darwin-4.2.1/release/threading-multi:~/dev/stan-web/boost_1_53_0/bin.v2/libs/system/build/clang-darwin-4.2.1/release/threading-multi






From the home directory
-----------------------
cd stan; make CC=clang++ bin/stanc; 
bin/stanc ../models/linear_model.stan --o=../models/linear_model.hpp --no_main;
cd ..;

export DYLD_LIBRARY_PATH=~/dev/stan-web/boost_1_53_0/bin.v2/libs/thread/build/clang-darwin-4.2.1/release/threading-multi:~/dev/stan-web/boost_1_53_0/bin.v2/libs/system/build/clang-darwin-4.2.1/release/threading-multi

export DYLD_LIBRARY_PATH=~/dev/stan-web/boost_1_53_0/bin.v2/libs/thread/build/gcc-4.6.3/release/threading-multi:~/dev/stan-web/boost_1_53_0/bin.v2/libs/system/build/gcc-4.6.3/release/threading-multi

g++ -I . -I stan/src                                 \
-I stan/lib/eigen_3.1.3 -I stan/lib/boost_1.53.0      \
-L stan/bin -lstan                                       \
-I wt/src -I wt/build                                                  \
-L wt/build/src -lwt -l wthttp                              \
-L /usr/local/lib \
-l boost_thread \
-l boost_system \
-lboost_random -lboost_regex -lboost_signals -lboost_system \
-lboost_thread -lboost_filesystem -lboost_program_options \
-lboost_date_time \
-o a.out src/websocket_linear_model.cpp


./a.out --docroot . --http-address 0.0.0.0 --http-port 9090



Compiling a wt project
------------------------------------------------------------
RE: How do I compile my first Wt project? - Added by Alec Taylor almost 2 years ago

To compile the code:
g++ -L/usr/lib -lwt -lwthttp <filename>.C -o <filename>.wt

To run the code on the server:
<filename>.wt --docroot ./ --http-address 0.0.0.0 --http-port 8080

(1-1/1)
